def decorator_func(func_obj):
    print('начало выполнения функции декоратора')
    
    def wrapper():
        print('начало выполнения функции обёртки')
        func_obj()
        print('конец выполнения функции обёртки')
    
    print('конец выполнения функции декоратора')
    return wrapper


def test_func():
    print('выполнение тестовой функции')


# >>> test_func
# <function test_func at 0x00000193A84039C0>
# >>>
# >>> test_func.__name__
# 'test_func'
# >>>
# >>> test_func()
# выполнение тестовой функции

# явное декорирование функции
test_func = decorator_func(test_func)
# начало выполнения функции декоратора
# конец выполнения функции декоратора

# >>> test_func
# <function decorator_func.<locals>.wrapper at 0x00000193A8403A60>
# >>>
# >>> test_func.__name__
# 'wrapper'
# >>>
# >>> test_func()
# начало выполнения функции обёртки
# выполнение тестовой функции
# конец выполнения функции обёртки


# неявное декорирование функции
@decorator_func
def test_func_2():
    print('выполнение второй тестовой функции')


# начало выполнения функции декоратора
# конец выполнения функции декоратора
# >>> 
# >>> test_func_2()
# начало выполнения функции обёртки
# выполнение второй тестовой функции
# конец выполнения функции обёртки

